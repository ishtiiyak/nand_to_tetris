/**
 * Half Adder: Adds two 1-bit numbers together.
 * Outputs:
 * - sum: the right bit of the addition (a + b)
 * - carry: the left bit of the addition (carry bit)
 */
CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b 
        carry;  // Left bit of a + b

    PARTS:
    // --- Computing sum using XOR (a XOR b) ---
    // XOR implementation using NAND gates:
    // 1. First NAND the inputs
    Nand(a=a, b=b, out=nandout);
    // 2. Create inverted inputs
    Not(in=a, out=nota);
    Not(in=b, out=notb);
    // 3. NAND the combinations
    Nand(a=nota, b=b, out=w1);    // NAND of (NOT a) and b
    Nand(a=a, b=notb, out=w2);    // NAND of a and (NOT b)
    // 4. Final NAND for sum
    Nand(a=w1, b=w2, out=sum);

    // --- Computing carry using AND (a AND b) ---
    // AND implementation using NAND followed by NOT
    Nand(a=a, b=b, out=nandout2);
    Not(in=nandout2, out=carry);
}